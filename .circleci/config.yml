# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Aliases to reuse
_defaults: &defaults
  docker:
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    - image: cimg/python:3.8
  working_directory: ~/repo

commands:
  check-skip:
    steps:
      - run:
          name: Check-skip
          command: |
            if [ ! -d "openpiv_cxx" ]; then
              echo "Build was not run due to skip, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi
            export git_log=$(git log --max-count=1 --pretty=format:"%B" | tr "\n" " ")
            echo "Got commit message:"
            echo "${git_log}"
            if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$git_log" == *"[skip circle]"* ]] || [[ "$git_log" == *"[circle skip]"* ]]); then
              echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi
  apt-install:
    steps:
      - run:
          name: Install apt packages
          command: |
            sudo apt-get update
            sudo apt-get install build-essential curl zip unzip tar ninja-build
  merge:
    steps:
      - run:
          name: merge with upstream
          command: |
            echo $(git log -1 --pretty=%B) | tee gitlog.txt
            echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
            if [[ $(cat merge.txt) != "" ]]; then
              echo "Merging $(cat merge.txt)";
              git remote add upstream https://github.com/ErichZimmer/OpenPIV-Python-cxx.git;
              git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
              git fetch upstream main;
            fi     
jobs:
# Build OpenPIV-Python-cxx from source
  build_openpiv_cxx:
    <<: *defaults
    steps:
      - checkout
      - check-skip
      - merge

      - apt-install

      - run:
          name: update submodules
          command: |
            git submodule init
            git submodule update
      - restore_cache:
          keys:
              - deps_ccache-{{ .Branch }}
              - deps_ccache

      - run:
          name: setup Python venv
          command: |
            pip install --upgrade pip
            pip install --install-option="--no-cython-compile" cython
            pip install numpy==1.21.5
            pip install ninja
            pip install scikit-build
            pip install imageio
            pip install scipy
            pip install matplotlib            
      - run:
          name: build OpenPIV-cxx
          command: |
            python setup.py build
      - save_cache:
          key: deps_ccache-{{ .Branch }}
          paths:
            - ~/.ccache
            - ~/.cache/pip

      - run:
          name: ccache performance
          command: |
            ccache -s
      - persist_to_workspace:
          root: ~/
          paths:
            - .
workflows:
  version: 2
  default:
    jobs:
      - build_openpiv_cxx
Footer
Â© 2022 GitHub, Inc.
Footer navigation

    Terms
